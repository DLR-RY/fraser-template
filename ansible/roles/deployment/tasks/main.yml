---
- name: Ping host machines
  ping:
  register: hostsstable
  
- name: Print it was a success
  command: echo "Yeah"
  when: hostsstable|success
  changed_when: False

- name: Register current remote home-path (pwd)
  shell: pwd
  register: path

- set_fact:
    remote_home_path: "{{ path.stdout }}"

- name: Copy model directory to the remote hosts
  copy:
    src: ../models/{{ item }}
    dest: "{{ remote_home_path }}/tmp/models"
  loop: "{{ hostvars[inventory_hostname]['models'] }}"

- name: Check if build/configuration folders exists
  file: path="{{ remote_home_path }}/tmp/models/{{ item }}/build/configuration" state=directory
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when: item != "configuration_server"
  changed_when: False

- name: Copy configuration file to model
  copy:
    src: ../configurations/{{ config }}/{{ item }}.config
    dest: "{{ remote_home_path }}/tmp/models/{{ item }}/build/configuration"
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when: item != "configuration_server"

- name: Fix 'tmp-folder' permission
  file: path=tmp owner=user mode=0775 state=directory recurse=yes

- name: Run models on the hosts
  command: "{{ remote_home_path }}/tmp/models/{{ async_item }}/build/bin/{{ async_item }}"
  async: 45
  poll: 0
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  loop_control:
    loop_var: "async_item"
  register: async_results

- name: Check sync status
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 30

- debug: var=async_poll_results.results