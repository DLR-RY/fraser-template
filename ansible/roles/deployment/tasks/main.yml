---
- name: Ping host machines
  ping:
  register: hostsstable

- name: Register current remote home-path (pwd)
  shell: pwd
  register: path

- set_fact:
    remote_home_path: "{{ path.stdout }}"

- name: Copy model directory to the remote hosts
  copy:
    src: ../models/{{ item }}
    dest: "{{ remote_home_path }}/tmp_simulation/models"
  loop: "{{ hostvars[inventory_hostname]['models'] }}"

- name: Check if configuration folder exists
  file: path="{{ remote_home_path }}/tmp_simulation/configurations/{{ config }}" state=directory
  changed_when: False

- name: Copy configuration file to remote hosts
  copy:
    src: ../configurations/{{ config }}/{{ item }}.config
    dest: "{{ remote_home_path }}/tmp_simulation/configurations/{{ config }}/"
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when: item != "configuration_server"
  
- name: Copy resources to remote hosts
  copy:
    src: ../resources/idl
    dest: "{{ remote_home_path }}/tmp_simulation/resources"
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when: item != "configuration_server"

- name: Fix 'tmp-folder' permission
  file: path=tmp_simulation owner=user mode=0775 state=directory recurse=yes

- name: Run configuration server on the host
  shell: "{{ remote_home_path }}/tmp_simulation/models/{{ item }}/build/bin/{{ item }} --models-config-file {{ remote_home_path }}/tmp_simulation/models/{{ item }}/configuration/models-config.xml"
  async: 1000
  poll: 0
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when: item == "configuration_server"
  
- name: Run models on the hosts
  shell: "{{ remote_home_path }}/tmp_simulation/models/{{ item }}/build/bin/{{ item }}"
  async: 1000
  poll: 0
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when:
    - item != "simulation_model"
    - item != "configuration_server"
  register: async_results
  
- name: Run simulation model on the host
  shell: "{{ remote_home_path }}/tmp_simulation/models/{{ item }}/build/bin/{{ item }} --load-config {{ remote_home_path }}/tmp_simulation/configurations/{{ config }}/"
  loop: "{{ hostvars[inventory_hostname]['models'] }}"
  when: item == "simulation_model"
  register: sim_out

- name: Check sync status
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: "async_result_item"
  when: async_result_item.ansible_job_id is defined
  register: async_poll_results
  until: async_poll_results.finished
  retries: 30

- debug: var="{{ item.stdout_lines }}"
  loop: "{{ sim_out.results }}"
  when: item.stdout_lines is defined