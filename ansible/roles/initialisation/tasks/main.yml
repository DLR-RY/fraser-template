---
- name: Check if folders exists
  file: path="{{ item }}" state=directory
  loop:
    - "../models"
    # The folder 'config_0' is for the default configuration files (automated generated with initial values)
    - "../configurations"          
    - "../fraser"
    - "../ansible/inventory"
    - "../ansible/inventory/group_vars/all"
  
  # Create hosts file (inventory file)
- name: Build hosts file
  command: python3 ../fraser/scripts/hostsGenerator.py -f ../models/configuration_server/configuration/models-config.xml -d ../ansible/
  changed_when: False
- meta: refresh_inventory

  # Define global variables
- name: Build variables file
  command: python3 ../fraser/scripts/modelsVarsGenerator.py -f ../models/configuration_server/configuration/models-config.xml -d ../ansible/
  changed_when: False

- name: Include main.yml file in group_vars/all (includes global variables)
  include_vars:
   file: "../ansible/inventory/group_vars/all/main.yml"

  # Create folders if they not exist
- name: Check if resource/idl folders exists
  file: path="../models/{{ item.name }}/resources/idl" state=directory
  loop: "{{ models }}"
  when: item.name != "configuration_server"
  changed_when: False

  # -------------------------------------------------------
  # All models have all available IDLs of the other models.
  # -------------------------------------------------------
- name: Dissolve event-data dependencies between the models (fbs-files)
  copy:
    src: "../models/{{ item.1.name }}/resources/idl/"
    dest: "../models/{{ item.0.name }}/resources/idl/"
  with_nested:
    - "{{ models }}"
    - "{{ models }}"
  when: 
    - item.0.name != "configuration_server"
    - item.1.name != "configuration_server"

- name: Find Flatbuffers files ending with .fbs
  find:
    paths: ../models
    patterns: "*.fbs"
    recurse: yes
  register: fbsfiles

- name: Copy default event (fbs-file) to the models
  copy:
    src: "../resources/idl/event.fbs"
    dest: "../models/{{ item.name }}/resources/idl/"
  loop: "{{ models }}"
  when: item.name != "configuration_server"

- name: Include specific eventdata-fbs into default event-fbs
  lineinfile:
    path: "../models/{{ item[0].name }}/resources/idl/event.fbs"
    insertafter: "// event.fbs"
    line: 'include "{{ item[1].path | basename }}";'
  when:
    - item[1].path is search(item[0].name)
    - item[0].name != "configuration_server"
    - (item[1].path | basename) != "event.fbs"
  with_nested:
    - "{{ models }}"
    - "{{ fbsfiles.files }}"
    
- name: Read fbs-data files
  command: python3.6 ../fraser/scripts/fbsDataReader.py -f {{ item.path }}
  loop: "{{ fbsfiles.files }}"
  when: (item.path | basename) != "event.fbs"
  register: datanames
  changed_when: False
    
- name: Add specific eventdata-fbs to union type of default event-fbs
  lineinfile:
    path: "../models/{{ item[0].name }}/resources/idl/event.fbs"
    insertafter: "String:string,"
    line: '{{ item[1].stdout }},'
  when:
    - item[1].item.path is search(item[0].name)
    - item[0].name != "configuration_server"
    - item[1].stdout is defined
  with_nested:
    - "{{ models }}"
    - "{{ datanames.results }}"
  
  # -------------------------------------------------------
  # Generate C++ headers from the flatbuffers
  # -------------------------------------------------------
- name: Find Flatbuffers files ending with .fbs
  find:
    paths: ../models
    patterns: "*.fbs"
    recurse: yes
  register: fbs_files

- debug:
    msg: "{{ item.path | dirname }}"
  loop: "{{ fbs_files.files }}"

- name: Generate C++ headers to access and construct serialized events
  command: flatc -o {{ item.path | dirname }} --cpp {{ item.path }}
  loop: "{{ fbs_files.files }}"
  changed_when: False